const SHEET_ID = 'TU_SHEET_ID_AQUI'; // Replace with your actual Sheet ID
const RESOURCE_SHEET_NAME = "Recursos";
const CATEGORY_SHEET_NAME = "Categorias";
const TYPE_SHEET_NAME = "Tipos";

const COL_MAP = { ID: 1, NOMBRE: 2, DESCRIPCION: 3, URL: 4, CATEGORIA: 5, TIPO: 6, ESTATUS: 7, AUTOR: 8, RECURSOS_ADICIONALES: 9, FAVORITO: 10, CLICKS: 11 };

let SPREADSHEET;
let RESOURCE_SHEET;
let CATEGORY_SHEET;
let TYPE_SHEET;

function getSheet(sheetName) {
    Logger.log("getSheet: Iniciando para la hoja '" + sheetName + "'");
    try {
        if (!SPREADSHEET) {
            Logger.log("getSheet: Abriendo Spreadsheet con ID: " + SHEET_ID);
            SPREADSHEET = SpreadsheetApp.openById(SHEET_ID);
            if (!SPREADSHEET) {
                Logger.log("Error Crítico en getSheet: No se pudo abrir Spreadsheet con ID: " + SHEET_ID + ". Verifica el ID y los permisos.");
                return null; 
            }
            Logger.log("getSheet: Spreadsheet abierto exitosamente.");
        }
        
        let sheet = SPREADSHEET.getSheetByName(sheetName);
        if (!sheet) {
            Logger.log("getSheet: Hoja '" + sheetName + "' no encontrada.");
            if (sheetName === CATEGORY_SHEET_NAME || sheetName === TYPE_SHEET_NAME) {
                Logger.log("getSheet: Intentando crear la hoja '" + sheetName + "'.");
                sheet = SPREADSHEET.insertSheet(sheetName);
                if (sheet) {
                    const header = (sheetName === CATEGORY_SHEET_NAME) ? "NOMBRE_CATEGORIA" : "NOMBRE_TIPO";
                    sheet.getRange("A1").setValue(header).setFontWeight("bold");
                    SpreadsheetApp.flush(); 
                    Logger.log("getSheet: Hoja '" + sheetName + "' creada y cabecera añadida exitosamente.");
                } else {
                    Logger.log('Error Crítico en getSheet: No se pudo crear la hoja "' + sheetName + '".');
                    return null; 
                }
            } else {
                 Logger.log("getSheet: No se intentará crear la hoja '" + sheetName + "' ya que no es Categoria ni Tipo.");
                 if (sheetName === RESOURCE_SHEET_NAME) {
                    Logger.log("Error Crítico en getSheet: La hoja de Recursos '" + RESOURCE_SHEET_NAME + "' no existe y no se creará automáticamente. Esta hoja es esencial.");
                    return null;
                 }
            }
        } else {
            Logger.log("getSheet: Hoja '" + sheetName + "' encontrada exitosamente.");
        }

        if (sheet) {
           if (sheetName === RESOURCE_SHEET_NAME) RESOURCE_SHEET = sheet;
           if (sheetName === CATEGORY_SHEET_NAME) CATEGORY_SHEET = sheet;
           if (sheetName === TYPE_SHEET_NAME) TYPE_SHEET = sheet;
        }
        return sheet; 
    } catch (error) {
        Logger.log("Error Fatal en getSheet(" + sheetName + "): " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return null; 
    }
}

function doGet(e) {
    Logger.log("doGet: Iniciando ejecución. Parámetros: " + JSON.stringify(e));
    try {
        Logger.log("doGet: Intentando inicializar la hoja de Recursos...");
        const resourceSheet = getSheet(RESOURCE_SHEET_NAME);
        if (!resourceSheet) {
            Logger.log("Error Crítico en doGet: La hoja de Recursos no pudo ser inicializada. Deteniendo ejecución.");
            return HtmlService.createHtmlOutput('<p>Error: La hoja de datos de Recursos no está disponible. Contacta al administrador. Revisa los logs del servidor para más detalles.</p>');
        }
        Logger.log("doGet: Hoja de Recursos inicializada. Intentando inicializar hoja de Categorías...");
        
        const categorySheet = getSheet(CATEGORY_SHEET_NAME);
         if (!categorySheet) { // Aunque se intente crear, podría fallar si hay un problema mayor.
            Logger.log("Advertencia en doGet: La hoja de Categorías no pudo ser inicializada/creada. La aplicación podría funcionar con limitaciones.");
        } else {
            Logger.log("doGet: Hoja de Categorías inicializada/creada.");
        }
        Logger.log("doGet: Intentando inicializar hoja de Tipos...");

        const typeSheet = getSheet(TYPE_SHEET_NAME);
        if (!typeSheet) { // Similar a categorías.
            Logger.log("Advertencia en doGet: La hoja de Tipos no pudo ser inicializada/creada. La aplicación podría funcionar con limitaciones.");
        } else {
            Logger.log("doGet: Hoja de Tipos inicializada/creada.");
        }

        Logger.log("doGet: Hojas inicializadas (o intento de creación realizado). Procediendo a crear plantilla HTML desde 'Index'.");
        
        const template = HtmlService.createTemplateFromFile('Index');
        
        Logger.log("doGet: Plantilla 'Index' creada. Evaluando...");
        const htmlOutput = template.evaluate()
            .setTitle('Catálogo de Recursos App')
            .addMetaTag('viewport', 'width=device-width, initial-scale=1.0')
            .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
        Logger.log("doGet: Plantilla evaluada y HTML configurado. Retornando HTML al cliente.");
        return htmlOutput;

    } catch (error) {
        Logger.log('Error Fatal en doGet: ' + error.toString() + (error.stack ? " - Stack: " + error.stack : ""));
        return HtmlService.createHtmlOutput('<p>Error crítico al cargar la aplicación: ' + escapeHtml(String(error.message || error)) + '. Revisa los logs del servidor o contacta al administrador.</p>');
    }
}

function include(filename) {
    Logger.log("include: Solicitando archivo '" + filename + "'");
    try {
        const content = HtmlService.createHtmlOutputFromFile(filename).getContent();
        Logger.log("include: Archivo '" + filename + "' incluido exitosamente. Longitud del contenido: " + (content ? content.length : 0));
        return content;
    } catch (error) {
        Logger.log('Error en include(' + filename + '): ' + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        // Corregido: Usar JSON.stringify directamente sobre el mensaje de error para asegurar que sea un literal de cadena JS válido.
        const jsonErrorDetails = JSON.stringify(String(error.message || "Error desconocido al incluir archivo."));
        return '<script>' +
               'console.error("GAS: Error al incluir el archivo \'' + escapeHtml(filename) + '\'.");' + // Asumimos que no se añade .html aquí ya que createHtmlOutputFromFile no lo usa.
               'console.error("GAS: Detalles del error: " + ' + jsonErrorDetails + ');' +
               '</script>';
    }
}

function escapeHtml(unsafe) {
    if (typeof unsafe !== 'string') return unsafe;
    return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}

function getRowAsObject(rowArray) {
    if (!rowArray || rowArray.length < Object.keys(COL_MAP).length) return null;
    return {
        id: rowArray[COL_MAP.ID - 1],
        nombre: rowArray[COL_MAP.NOMBRE - 1] || '',
        descripcion: rowArray[COL_MAP.DESCRIPCION - 1] || '',
        url: rowArray[COL_MAP.URL - 1] || '',
        categoria: String(rowArray[COL_MAP.CATEGORIA - 1] || '').toUpperCase(),
        tipo: rowArray[COL_MAP.TIPO - 1] || '',
        estatus: rowArray[COL_MAP.ESTATUS - 1] || 'Activo',
        autor: rowArray[COL_MAP.AUTOR - 1] || '',
        recursosAdicionales: rowArray[COL_MAP.RECURSOS_ADICIONALES - 1] || '',
        favorito: String(rowArray[COL_MAP.FAVORITO - 1]).toUpperCase() === 'TRUE',
        clicks: parseInt(rowArray[COL_MAP.CLICKS - 1], 10) || 0
    };
}

function findRowIndexById(sheet, id) {
    if (!sheet || !id) return -1;
    const idColumn = COL_MAP.ID;
    if (sheet.getLastRow() < 2) return -1;
    const data = sheet.getRange(2, idColumn, sheet.getLastRow() - 1, 1).getValues();
    for (let i = 0; i < data.length; i++) {
        if (String(data[i][0]) === String(id)) {
            return i + 2; 
        }
    }
    return -1;
}

function getResources() {
    Logger.log("getResources: Solicitando todos los recursos.");
    try {
        const sheet = getSheet(RESOURCE_SHEET_NAME);
        if (!sheet) {
             Logger.log("getResources: Hoja de recursos no encontrada al intentar obtener recursos.");
            return { success: false, message: 'Hoja de recursos no encontrada.' };
        }
        if (sheet.getLastRow() < 2) {
            Logger.log("getResources: Hoja de recursos vacía o solo con cabecera.");
            return { success: true, data: [] };
        }
        const values = sheet.getDataRange().getValues(); 
        const resources = [];
        for (let i = 1; i < values.length; i++) { 
            if (values[i][COL_MAP.ID - 1]) { 
                const resourceObj = getRowAsObject(values[i]);
                if(resourceObj) resources.push(resourceObj);
            }
        }
        Logger.log("getResources: " + resources.length + " recursos obtenidos exitosamente.");
        return { success: true, data: resources };
    } catch (error) {
        Logger.log("Error en getResources: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al obtener recursos: ' + error.message };
    }
}

function addResource(resourceData) {
    Logger.log("addResource: Intentando añadir recurso: " + JSON.stringify(resourceData));
    try {
        const sheet = getSheet(RESOURCE_SHEET_NAME);
        if (!sheet) throw new Error('Hoja de recursos no encontrada para añadir.');

        const requiredFields = ['nombre', 'url', 'categoria', 'tipo'];
        if (requiredFields.some(field => !resourceData[field])) {
            throw new Error('Faltan campos obligatorios: ' + requiredFields.filter(field => !resourceData[field]).join(', '));
        }

        resourceData.id = Utilities.getUuid();
        resourceData.estatus = 'Activo';
        resourceData.clicks = 0;
        resourceData.favorito = false;
        resourceData.nombre = String(resourceData.nombre).toUpperCase();
        resourceData.categoria = String(resourceData.categoria).toUpperCase();

        const newRow = [];
        newRow[COL_MAP.ID - 1] = resourceData.id;
        newRow[COL_MAP.NOMBRE - 1] = resourceData.nombre;
        newRow[COL_MAP.DESCRIPCION - 1] = resourceData.descripcion || '';
        newRow[COL_MAP.URL - 1] = resourceData.url;
        newRow[COL_MAP.CATEGORIA - 1] = resourceData.categoria;
        newRow[COL_MAP.TIPO - 1] = resourceData.tipo;
        newRow[COL_MAP.ESTATUS - 1] = resourceData.estatus;
        newRow[COL_MAP.AUTOR - 1] = resourceData.autor || '';
        newRow[COL_MAP.RECURSOS_ADICIONALES - 1] = resourceData.recursosAdicionales || '';
        newRow[COL_MAP.FAVORITO - 1] = resourceData.favorito;
        newRow[COL_MAP.CLICKS - 1] = resourceData.clicks;

        sheet.appendRow(newRow);
        Logger.log("addResource: Recurso añadido a la hoja. ID: " + resourceData.id);
        addCategoryIfNotExists(resourceData.categoria); 
        Logger.log("addResource: Finalizado exitosamente.");
        return { success: true, data: resourceData };
    } catch (error) {
        Logger.log("Error en addResource: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al añadir recurso: ' + error.message };
    }
}

function updateResource(resourceData) {
    Logger.log("updateResource: Intentando actualizar recurso: " + JSON.stringify(resourceData));
    try {
        const sheet = getSheet(RESOURCE_SHEET_NAME);
        if (!sheet) throw new Error('Hoja de recursos no encontrada para actualizar.');
        if (!resourceData || !resourceData.id) throw new Error("ID del recurso es requerido para actualizar.");

        const rowIndex = findRowIndexById(sheet, resourceData.id);
        if (rowIndex === -1) throw new Error('Recurso con ID "' + resourceData.id + '" no encontrado para actualizar.');
        Logger.log("updateResource: Recurso encontrado en fila " + rowIndex);

        const requiredFields = ['nombre', 'url', 'categoria', 'tipo'];
         if (requiredFields.some(field => !resourceData[field])) {
            throw new Error('Faltan campos obligatorios para actualizar: ' + requiredFields.filter(field => !resourceData[field]).join(', '));
        }
        resourceData.nombre = String(resourceData.nombre).toUpperCase();
        resourceData.categoria = String(resourceData.categoria).toUpperCase();

        sheet.getRange(rowIndex, COL_MAP.NOMBRE).setValue(resourceData.nombre);
        sheet.getRange(rowIndex, COL_MAP.DESCRIPCION).setValue(resourceData.descripcion || '');
        sheet.getRange(rowIndex, COL_MAP.URL).setValue(resourceData.url);
        sheet.getRange(rowIndex, COL_MAP.CATEGORIA).setValue(resourceData.categoria);
        sheet.getRange(rowIndex, COL_MAP.TIPO).setValue(resourceData.tipo);
        sheet.getRange(rowIndex, COL_MAP.AUTOR).setValue(resourceData.autor || '');
        sheet.getRange(rowIndex, COL_MAP.RECURSOS_ADICIONALES).setValue(resourceData.recursosAdicionales || '');
        Logger.log("updateResource: Campos actualizados en la hoja.");

        addCategoryIfNotExists(resourceData.categoria);

        const updatedRow = sheet.getRange(rowIndex, 1, 1, sheet.getLastColumn()).getValues()[0];
        const updatedResourceData = getRowAsObject(updatedRow);
        Logger.log("updateResource: Finalizado exitosamente.");
        return { success: true, data: updatedResourceData };
    } catch (error) {
        Logger.log("Error en updateResource: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al actualizar recurso: ' + error.message };
    }
}

function updateResourceStatus(id, newStatus) {
   Logger.log("updateResourceStatus: ID: " + id + ", Nuevo Estatus: " + newStatus);
   try {
        const sheet = getSheet(RESOURCE_SHEET_NAME);
        if (!sheet) throw new Error('Hoja de recursos no encontrada para actualizar estatus.');
        if (!id || (newStatus !== 'Activo' && newStatus !== 'Inactivo')) {
            throw new Error("ID y estatus válido ('Activo' o 'Inactivo') son requeridos.");
        }
        const rowIndex = findRowIndexById(sheet, id);
        if (rowIndex === -1) throw new Error('Recurso con ID "' + id + '" no encontrado para actualizar estatus.');
        Logger.log("updateResourceStatus: Recurso encontrado en fila " + rowIndex);
        
        let favoritoRemoved = false;
        sheet.getRange(rowIndex, COL_MAP.ESTATUS).setValue(newStatus);
        if (newStatus === 'Inactivo') {
            const currentFav = String(sheet.getRange(rowIndex, COL_MAP.FAVORITO).getValue()).toUpperCase();
            if (currentFav === 'TRUE') {
                sheet.getRange(rowIndex, COL_MAP.FAVORITO).setValue(false);
                favoritoRemoved = true;
                Logger.log("updateResourceStatus: Recurso marcado inactivo, favorito eliminado.");
            }
        }
        Logger.log("updateResourceStatus: Estatus actualizado a " + newStatus);
        return { success: true, id: id, newStatus: newStatus, favoritoRemoved: favoritoRemoved };
    } catch (error) {
        Logger.log("Error en updateResourceStatus: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al actualizar estatus: ' + error.message };
    }
}

function updateResourceFavorite(id, isFavorite) {
   Logger.log("updateResourceFavorite: ID: " + id + ", Es Favorito: " + isFavorite);
   try {
        const sheet = getSheet(RESOURCE_SHEET_NAME);
        if (!sheet) throw new Error('Hoja de recursos no encontrada para actualizar favorito.');
        if (!id || typeof isFavorite !== 'boolean') {
            throw new Error("ID y estado booleano de favorito son requeridos.");
        }
        const rowIndex = findRowIndexById(sheet, id);
        if (rowIndex === -1) throw new Error('Recurso con ID "' + id + '" no encontrado para actualizar favorito.');
        Logger.log("updateResourceFavorite: Recurso encontrado en fila " + rowIndex);

        if (String(sheet.getRange(rowIndex, COL_MAP.ESTATUS).getValue()) === 'Inactivo' && isFavorite) {
          throw new Error("No se puede marcar como favorito un recurso inactivo.");
        }
        sheet.getRange(rowIndex, COL_MAP.FAVORITO).setValue(isFavorite);
        Logger.log("updateResourceFavorite: Favorito actualizado a " + isFavorite);
        return { success: true, id: id, isFavorite: isFavorite };
    } catch (error) {
        Logger.log("Error en updateResourceFavorite: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al actualizar favorito: ' + error.message };
    }
}

function incrementResourceClick(id) {
   Logger.log("incrementResourceClick: ID: " + id);
   try {
        const sheet = getSheet(RESOURCE_SHEET_NAME);
        if (!sheet) return { success: false, message: 'Hoja de recursos no encontrada para incrementar click.' }; 
        if (!id) throw new Error("ID del recurso es requerido.");

        const rowIndex = findRowIndexById(sheet, id);
        if (rowIndex === -1) {
             Logger.log("incrementResourceClick: Recurso con ID '" + id + "' no encontrado.");
             return { success: false, message: 'Recurso con ID "' + id + '" no encontrado.' };
        }
        Logger.log("incrementResourceClick: Recurso encontrado en fila " + rowIndex);
        const clicksRange = sheet.getRange(rowIndex, COL_MAP.CLICKS);
        const currentClicks = parseInt(clicksRange.getValue(), 10) || 0;
        const newClicks = currentClicks + 1;
        clicksRange.setValue(newClicks);
        Logger.log("incrementResourceClick: Clicks incrementados a " + newClicks);
        return { success: true, id: id, clicks: newClicks };
    } catch (error) {
        Logger.log("Error en incrementResourceClick: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al incrementar clicks: ' + error.message };
    }
}

function getCategories() {
    Logger.log("getCategories: Solicitando todas las categorías.");
    try {
        const sheet = getSheet(CATEGORY_SHEET_NAME);
        if (!sheet) {
            Logger.log("getCategories: Hoja de categorías no encontrada.");
            return { success: false, message: 'Hoja de categorías no encontrada.' };
        }
        const lastRow = sheet.getLastRow();
        if (lastRow < 2) {
            Logger.log("getCategories: Hoja de categorías vacía o solo con cabecera.");
            return { success: true, data: [] };
        }

        const range = sheet.getRange(2, 1, lastRow - 1, 1); 
        const values = range.getValues();
        const categories = values.map(row => row[0])
                                .filter(String) 
                                .map(cat => String(cat).trim().toUpperCase())
                                .filter(cat => cat.length > 0); 
        const uniqueCategories = [...new Set(categories)]; 
        uniqueCategories.sort((a, b) => a.localeCompare(b)); 
        Logger.log("getCategories: " + uniqueCategories.length + " categorías obtenidas.");
        return { success: true, data: uniqueCategories };
    } catch (error) {
        Logger.log("Error en getCategories: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al obtener categorías: ' + error.message };
    }
}

function addCategory(categoryName) {
    Logger.log("addCategory: Solicitud para añadir categoría: " + categoryName);
    const trimmedName = String(categoryName || '').trim();
    if (!trimmedName) {
        Logger.log("addCategory: Nombre de categoría vacío.");
        return { success: false, message: 'El nombre de la categoría no puede estar vacío.' };
    }
    return addCategoryIfNotExists(trimmedName);
}

function addCategoryIfNotExists(categoryName) {
    Logger.log("addCategoryIfNotExists: Verificando/Añadiendo categoría: " + categoryName);
    try {
        const upperCategoryName = String(categoryName).trim().toUpperCase();
        if (!upperCategoryName) {
            Logger.log("addCategoryIfNotExists: Nombre de categoría vacío después de trim/upper.");
            return { success: false, message: 'Nombre de categoría vacío.' };
        }

        const categoriesResult = getCategories(); 
        if (!categoriesResult.success) {
             Logger.log("addCategoryIfNotExists: Fallo al obtener categorías existentes: " + (categoriesResult.message || 'Error desconocido'));
            throw new Error(categoriesResult.message || 'Error al obtener hoja de categorías.');
        }
        
        const sheet = getSheet(CATEGORY_SHEET_NAME); 
        if (!sheet) {
            Logger.log("addCategoryIfNotExists: La hoja " + CATEGORY_SHEET_NAME + " no pudo ser encontrada o creada después de getCategories.");
            throw new Error('La hoja ' + CATEGORY_SHEET_NAME + ' no pudo ser encontrada o creada.');
        }

        const existingCategories = categoriesResult.data;
        Logger.log("addCategoryIfNotExists: Categorías existentes: " + JSON.stringify(existingCategories));

        if (!existingCategories.includes(upperCategoryName)) {
            Logger.log("addCategoryIfNotExists: Categoría '" + upperCategoryName + "' no existe. Añadiendo...");
            sheet.appendRow([upperCategoryName]);
            Logger.log("addCategoryIfNotExists: Categoría '" + upperCategoryName + "' añadida.");
            return { success: true, added: true, category: upperCategoryName };
        } else {
            Logger.log("addCategoryIfNotExists: Categoría '" + upperCategoryName + "' ya existe.");
            return { success: true, added: false, category: upperCategoryName };
        }
    } catch (error) {
        Logger.log("Error en addCategoryIfNotExists ("+categoryName+"): " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error interno al añadir categoría: ' + error.message };
    }
}

function updateCategory(oldName, newName) {
    Logger.log("updateCategory: Solicitud para actualizar '" + oldName + "' a '" + newName + "'");
    try {
        const trimmedOldName = String(oldName || '').trim();
        const trimmedNewName = String(newName || '').trim();
        if (!trimmedOldName || !trimmedNewName) throw new Error("Nombres de categoría (antiguo y nuevo) no pueden estar vacíos.");

        const catSheet = getSheet(CATEGORY_SHEET_NAME);
        const resSheet = getSheet(RESOURCE_SHEET_NAME);

        if (!catSheet) throw new Error('Hoja "' + CATEGORY_SHEET_NAME + '" no encontrada para actualizar.');
        if (!resSheet) throw new Error('Hoja "' + RESOURCE_SHEET_NAME + '" no encontrada para actualizar referencias.');

        const upperOldName = trimmedOldName.toUpperCase();
        const upperNewName = trimmedNewName.toUpperCase();

        if (upperOldName === upperNewName) {
            Logger.log("updateCategory: Nombres son iguales, no se requiere actualización.");
            return { success: true, message: "Los nombres de categoría son iguales, no se requiere actualización.", updatedResources: 0 };
        }

        const categoriesResult = getCategories();
        if (!categoriesResult.success) throw new Error(categoriesResult.message);
        const existingCategories = categoriesResult.data;
        Logger.log("updateCategory: Categorías existentes: " + JSON.stringify(existingCategories));

        if (existingCategories.includes(upperNewName)) {
             Logger.log("updateCategory: Nueva categoría '" + upperNewName + "' ya existe.");
            throw new Error('La categoría "' + upperNewName + '" ya existe. Elige un nombre diferente.');
        }
        if (!existingCategories.includes(upperOldName)) {
            Logger.log("updateCategory: Categoría original '" + upperOldName + "' no encontrada.");
            throw new Error('Categoría original "' + upperOldName + '" no encontrada.');
        }
        
        Logger.log("updateCategory: Actualizando en la hoja de Categorías...");
        const categoryDataRange = catSheet.getRange("A2:A" + Math.max(2, catSheet.getLastRow())); 
        const categoryData = categoryDataRange.getValues();
        let categoryRowIndex = -1;
        for (let i = 0; i < categoryData.length; i++) {
            if (String(categoryData[i][0]).trim().toUpperCase() === upperOldName) {
                categoryRowIndex = i + 2; 
                break;
            }
        }
        if (categoryRowIndex === -1) throw new Error('Categoría original "' + upperOldName + '" no encontrada en la hoja de categorías (esto no debería ocurrir).');
        catSheet.getRange(categoryRowIndex, 1).setValue(upperNewName);
        Logger.log("updateCategory: Categoría actualizada en la hoja de Categorías. Fila: " + categoryRowIndex);

        Logger.log("updateCategory: Actualizando en la hoja de Recursos...");
        let updatedCount = 0;
        if (resSheet.getLastRow() > 1) { 
            const resourceDataRange = resSheet.getDataRange();
            const resourceValues = resourceDataRange.getValues();
            const updates = [];

            for (let i = 1; i < resourceValues.length; i++) { 
                const currentCategory = String(resourceValues[i][COL_MAP.CATEGORIA - 1]).trim().toUpperCase();
                if (currentCategory === upperOldName) {
                    updates.push({ range: resSheet.getRange(i + 1, COL_MAP.CATEGORIA), value: upperNewName });
                    updatedCount++;
                }
            }
            if (updates.length > 0) {
                Logger.log("updateCategory: Encontrados " + updates.length + " recursos para actualizar categoría. Aplicando cambios...");
                updates.forEach(update => update.range.setValue(update.value));
                SpreadsheetApp.flush(); 
                Logger.log("updateCategory: Cambios en recursos aplicados.");
            } else {
                Logger.log("updateCategory: No se encontraron recursos con la categoría '" + upperOldName + "'.");
            }
        } else {
            Logger.log("updateCategory: Hoja de Recursos vacía, no hay nada que actualizar.");
        }
        return { success: true, oldName: upperOldName, newName: upperNewName, updatedResources: updatedCount };
    } catch (error) {
        Logger.log("Error en updateCategory: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al actualizar categoría: ' + error.message };
    }
}


function getResourceTypes() {
    Logger.log("getResourceTypes: Solicitando todos los tipos de recursos.");
    try {
        const sheet = getSheet(TYPE_SHEET_NAME);
        if (!sheet) {
            Logger.log("getResourceTypes: Hoja de tipos no encontrada.");
            return { success: false, message: 'Hoja "' + TYPE_SHEET_NAME + '" no encontrada.' };
        }
        const lastRow = sheet.getLastRow();
        if (lastRow < 2) {
            Logger.log("getResourceTypes: Hoja de tipos vacía o solo con cabecera.");
            return { success: true, data: [] };
        }

        const range = sheet.getRange(2, 1, lastRow - 1, 1);
        const values = range.getValues();
        const types = values.map(row => row[0])
                            .filter(String)
                            .map(type => String(type).trim())
                            .filter(type => type.length > 0);
        const uniqueTypes = [...new Set(types)];
        uniqueTypes.sort((a, b) => a.localeCompare(b));
        Logger.log("getResourceTypes: " + uniqueTypes.length + " tipos obtenidos.");
        return { success: true, data: uniqueTypes };
    } catch (error) {
        Logger.log("Error en getResourceTypes: " + error.toString() + (error.stack ? " Stack: " + error.stack : ""));
        return { success: false, message: 'Error al obtener tipos: ' + error.message };
    }
}
